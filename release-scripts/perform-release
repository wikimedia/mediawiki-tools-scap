#!/bin/bash

set -eu -o pipefail

# Don't set this
SKIP_CHECKS=${SKIP_CHECKS:-}

BRANCH=master

SCRIPTDIR="$(dirname "$0")"

function get_last_tag {
    git tag --sort version:refname | grep -v debian/ | tail -1
}

function suggest_new_version {
    local old_version="$1"

    # Break the version out into components
    IFS=.
    local parts
    # shellcheck disable=SC2206
    parts=($old_version)
    # Add one to the minor version
    : $(( parts[1] += 1 ))
    # Reset patch version to 0
    : $(( parts[2] = 0 ))
    # And mush back together
    echo "${parts[*]}"
    IFS=
}

function assert_clean_checkout {
    if [ "$(git status --porcelain)" ]; then
        echo "Checkout is not clean"
        git status
        exit 1
    fi
}

function sanity_checks {
    assert_clean_checkout
    git pull --rebase
    assert_clean_checkout
    if [ "$(git rev-list origin/$BRANCH..)" ]; then
        echo Local commits detected:
        git log --oneline origin/$BRANCH..
        echo Aborting
        exit 1
    fi
}

function push_gitlab {
    local remote_branch="review/$USER/release-$VERS"

    if ! git push \
        -o merge_request.create \
        -o merge_request.target=$BRANCH \
        -o merge_request.merge_when_pipeline_succeeds \
        -o merge_request.remove_source_branch \
        origin "HEAD:$remote_branch" &> "$tmp"; then
      cat "$tmp"
      exit 1
    fi

    local mr_id
    mr_id=$(grep /merge_requests/ "$tmp" | sed -r -e 's,^.*/merge_requests/([0-9]+).*$,\1,')

    echo -n "Waiting for merge request $mr_id to merge..."

    while true; do
        echo -n "."
        curl -sSf "https://gitlab.wikimedia.org/api/v4/projects/repos%2freleng%2fscap/merge_requests/$mr_id" > "$tmp"

        local state status
        state="$(jq -r .state "$tmp")"
        status="$(jq -r .merge_status "$tmp")"

        if [ "$state" == "merged" ]; then
            echo
            echo "Merge request $mr_id has been merged"
            return 0
        fi
        if [[ "$status" =~ cannot ]]; then
            echo
            echo "Merge request $mr_id can't be merged"
            exit 1
        fi

        sleep 5
    done
}

if [ -z "$SKIP_CHECKS" ]; then
    sanity_checks
fi

OLD_VERS="$(get_last_tag)"
suggested_vers="$(suggest_new_version "$OLD_VERS")"

echo "Current version: $OLD_VERS"
echo -n "New version (default $suggested_vers): "
read -r VERS
if [ -z "$VERS" ]; then
    VERS="$suggested_vers"
fi

echo "Selected version $VERS"

"$SCRIPTDIR/prepare-scap-release" "$VERS"

tmp="$(mktemp)"
trap 'rm -f $tmp' EXIT

echo Pushing commit
push_gitlab

git pull --rebase

assert_clean_checkout

git tag --sign -m "Release $VERS" "$VERS" HEAD
git push --tags origin "$VERS"

cat <<EOF
scap release $VERS has been tagged.  You can install on production hosts
by logging into deployment.eqiad.wmnet and running:
scap install-world --version $VERS

If you need to roll back, you can specify a particular version tag with e.g.
scap install-world --version $OLD_VERS
EOF
