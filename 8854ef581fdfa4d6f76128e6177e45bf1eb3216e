{
  "comments": [
    {
      "key": {
        "uuid": "8969d517_726fce07",
        "filename": ".gitignore",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 2321
      },
      "writtenOn": "2019-03-05T23:55:14Z",
      "side": 1,
      "message": "Feel free to add this to .gitignore as a separate patch and merge to master at will. +2 for this line :)",
      "revId": "8854ef581fdfa4d6f76128e6177e45bf1eb3216e",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcb3f636_7a6b4007",
        "filename": ".gitignore",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 24
      },
      "writtenOn": "2019-03-06T05:53:10Z",
      "side": 1,
      "message": "Or have git to always ignore it on your local machine by adding it to your local $HOME/.config/git/ignore :)",
      "parentUuid": "8969d517_726fce07",
      "revId": "8854ef581fdfa4d6f76128e6177e45bf1eb3216e",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e484c1e0_2680ab8b",
        "filename": "scap/arg.py",
        "patchSetId": 5
      },
      "lineNbr": 297,
      "author": {
        "id": 1616
      },
      "writtenOn": "2019-03-05T13:08:00Z",
      "side": 1,
      "message": "You should make this and -D above mutually exclusive, see ArgParse.add_mutually_exclusive_group()",
      "revId": "8854ef581fdfa4d6f76128e6177e45bf1eb3216e",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e7257a9_f509e72f",
        "filename": "scap/arg.py",
        "patchSetId": 5
      },
      "lineNbr": 299,
      "author": {
        "id": 1616
      },
      "writtenOn": "2019-03-05T13:08:00Z",
      "side": 1,
      "message": "why \"Append\"? I don\u0027t think it\u0027s a great idea, we definitely don\u0027t want to have two ways to override the configuration that can compete with each other. The alternative is to do conflict resolution post-facto, but I don\u0027t think it\u0027s worth it.",
      "revId": "8854ef581fdfa4d6f76128e6177e45bf1eb3216e",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0e5d944_c289b59a",
        "filename": "scap/arg.py",
        "patchSetId": 5
      },
      "lineNbr": 300,
      "author": {
        "id": 1616
      },
      "writtenOn": "2019-03-05T13:08:00Z",
      "side": 1,
      "message": "this can simply be type\u003dlambda v: (\u0027canary_wait_time\u0027, v)\n\n(or if you remove the append, lambda v: [(\u0027canary_wait_time\u0027, v)]",
      "revId": "8854ef581fdfa4d6f76128e6177e45bf1eb3216e",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "306247ff_26ec3fb4",
        "filename": "scap/arg.py",
        "patchSetId": 5
      },
      "lineNbr": 303,
      "author": {
        "id": 2321
      },
      "writtenOn": "2019-03-05T23:55:14Z",
      "side": 1,
      "message": "Giuseppe\u0027s comments seem spot on for this implementation.\n\nAs an alternative implementation we could move canary_wait_time out of the configuration and just make it a command-line argument accepting an int with a default of 20. This should be easy to do since it\u0027s currently only used in one place in main.py. This option side-steps the necessity for deciding how to deal with:\n\n    scap sync-file -Dcanary_wait_time:10 --cw 30 \u0027being difficult\u0027",
      "revId": "8854ef581fdfa4d6f76128e6177e45bf1eb3216e",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ab00e30_4aa8b4b2",
        "filename": "tests/scap/test_main.py",
        "patchSetId": 5
      },
      "lineNbr": 15,
      "author": {
        "id": 2321
      },
      "writtenOn": "2019-03-05T23:55:14Z",
      "side": 1,
      "message": "Needs some modification to the cli.Application.factory method which entails some changes to bin/scap and cli.Application.run to accept args as arguments to those functions; however, once those changes are made (and \"--is-wrong\" is removed) this seems like a sound start.",
      "revId": "8854ef581fdfa4d6f76128e6177e45bf1eb3216e",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57527d1d_67cd787b",
        "filename": "tests/scap/test_main.py",
        "patchSetId": 5
      },
      "lineNbr": 15,
      "author": {
        "id": 24
      },
      "writtenOn": "2019-03-06T05:53:10Z",
      "side": 1,
      "message": "The change should be split in two changes:\n\n1) add basic tests on main.py and introduce the slight refactoring Tyler mentions there\n\n2) add canary wait time feature ;)\n\n(and even a third for the .gitignore)",
      "parentUuid": "2ab00e30_4aa8b4b2",
      "revId": "8854ef581fdfa4d6f76128e6177e45bf1eb3216e",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}