# Note: This is not called scap.py, because that would break tox,
# which finds all files named *.py, and gets confused when this one
# doesn't look and behave like it expects.

import os
import random
import re
import subprocess
import sys

def nop(ctx, *args, **kwargs):
    pass

def fixme(ctx, *args, **kwargs):
    assert 0

def mkdir(ctx, pathname=None):
    os.makedirs(pathname)

def git_init(ctx, pathname=None):
    _runcmd(ctx, ['git', 'init', pathname])
    exit_code_is(ctx, 0)

    # Write a random number to a file to make sure commit ids are
    # always different.
    _write(os.path.join(pathname, 'dummy'), str(random.randint(0, 2**62)).encode('UTF-8'))

    # Add the file so the repo isn't empty and has a master branch.
    _runcmd(ctx, ['git', 'add', '.'], cwd=pathname)
    _runcmd(ctx, ['git', 'commit', '-mdummy', 'dummy'], cwd=pathname)
    _save_git_tip(ctx, pathname, 'master')

def git_commit_file(ctx, source=None, pathname=None):
    git_commit_file_from(ctx, filename=source, source=source, pathname=pathname)

def git_commit_file_from(ctx, filename=None, source=None, pathname=None):
    _write(os.path.join(pathname, filename), get_file(source) + b'\n')

    _runcmd(ctx, ['git', 'add', filename], cwd=pathname)
    exit_code_is(ctx, 0)

    _runcmd(ctx, ['git', 'commit', '-qm', source], cwd=pathname)
    exit_code_is(ctx, 0)

    _save_git_tip(ctx, pathname, 'master')

def run_scap_version(ctx):
    _scap(ctx, ['version'])

def run_scap_sync(ctx):
    _scap(ctx, ['sync'])

def run_scap_apply_patches(ctx, code=None, patches=None, train=None):
    _scap(ctx, [
        'apply-patches', f'-Dstage_dir:{code}', f'-Dpatch_path:{patches}',
        '--train', train
    ])

def run_scap_test_patches(ctx, code=None, patches=None, train=None):
    _scap(ctx, [
        'test-patches', f'-Dstage_dir:{code}', f'-Dpatch_path:{patches}',
        '--train', train
    ])

def run_scap_list_patches(ctx, patches=None, train=None):
    _scap(ctx, ['list-patches', f'-Dpatch_path:{patches}', '--train', train])

def git_working_tree_is_clean(ctx, pathname=None):
    _runcmd(ctx, ['git', 'status', '--porcelain'], cwd=pathname)
    lines = ctx['stdout'].splitlines()
    lines = [x for x in lines if x != '?? extensions/']
    assert_eq(lines, [])

def repo_has_changed(ctx, pathname=None):
    assert_ne(_get_git_tip(pathname, 'master'), _remembered_tip(ctx, pathname))

def repo_has_not_changed(ctx, pathname=None):
    assert_eq(_get_git_tip(pathname, 'master'), _remembered_tip(ctx, pathname))

def repo_change_matches(ctx, pathname=None, filename=None):
    # Check that the changes since the remembered tip match a patch.
    _runcmd(ctx, ['git', 'diff', _remembered_tip(ctx, pathname), 'HEAD'], cwd=pathname)
    exit_code_is(ctx, 0)

    diff = ctx['stdout']
    _write('diff', diff.encode('UTF-8'))
    _write(filename, get_file(filename))
    _runcmd(ctx, ['interdiff', 'diff', filename], input=diff)
    exit_code_is(ctx, 0)
    assert_eq(ctx['stdout'], '')

def run_scap_sync_world(ctx):
    scap = _binary('bin', 'scap')
    _runcmd(ctx, [scap, 'sync-world'])

def exit_code_is(ctx, exit_code=None):
    actual = ctx['exit']
    exit_code = int(exit_code)
    if actual != exit_code:
        print('ctx:', ctx.as_dict())
        print(ctx['stdout'])
        print(ctx['stderr'])
    assert_eq(actual, exit_code)

def stdout_is_empty(ctx):
    assert_eq(ctx['stdout'], '')

def stdout_matches(ctx, pattern=None):
    m = _regex(pattern, ctx['stdout'])
    if m is None:
        print(ctx['stdout'])
    assert_ne(m, None)

def stdout_matches_and_later(ctx, pattern1=None, pattern2=None):
    output = ctx['stdout']
    m1 = _regex(pattern1, output)
    if m1 is None:
        print(output)
    assert_ne(m1, None)

    m2 = _regex(pattern2, output[m1.end():])
    if m2 is None:
        print(output)
    assert_ne(m2, None)

def stdout_does_not_match(ctx, pattern=None):
    m = _regex(pattern, ctx['stdout'])
    if m is not None:
        print(ctx['stdout'])
    assert_eq(m, None)

def stderr_matches(ctx, pattern=None):
    m = _regex(pattern, ctx['stderr'])
    if m is None:
        print(ctx['stdout'])
    assert_ne(m, None)

def _regex(pattern, string):
    return re.search(pattern, string)

def _binary(*basenames):
    return os.path.join(srcdir, *basenames)

def _scap(ctx, args):
    scap = _binary('bin', 'scap')
    env = dict(os.environ)
    env['PYTHONPATH'] = srcdir
    if 'SSH_AUTH_SOCK' in env:
        del env['SSH_AUTH_SOCK']
    _runcmd(ctx, [scap] + args, env=env)

def _runcmd(ctx, argv, cwd=None, env=None, input=''):
    p = subprocess.Popen(
        argv, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd,
        env=env)
    stdout, stderr = p.communicate(input)
    ctx['argv'] = argv
    ctx['stdout'] = stdout.decode('utf-8')
    ctx['stderr'] = stderr.decode('utf-8')
    ctx['exit'] = p.returncode

def _write(filename, content):
    dirname = os.path.dirname(filename)
    if dirname and not os.path.exists(dirname):
        os.makedirs(dirname)
    with open(filename, 'wb') as f:
        f.write(content)
  
def _save_git_tip(ctx, pathname, ref):
    tip = _get_git_tip(pathname, ref)
    tips = ctx.get('tips', {})
    tips[pathname] = tip
    ctx['tips'] = tips

def _get_git_tip(pathname, ref):
    dummy = Context()
    _runcmd(dummy, ['git', 'rev-list', '--max-count=1', ref], cwd=pathname)
    if dummy['exit'] != 0:
        print('dummy:', dummy.as_dict())
    assert_eq(dummy['exit'], 0)
    return dummy['stdout'].strip()

def _remembered_tip(ctx, pathname):
    ret = ctx['tips'][pathname]
    return ret
